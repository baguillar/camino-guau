generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/camino_guau_revision/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String             @unique
  password            String
  emailVerified       DateTime?
  image               String?
  role                Role               @default(USER)
  totalKilometers     Float              @default(0)
  totalWalks          Int                @default(0)
  currentStreak       Int                @default(0)
  bestStreak          Int                @default(0)
  lastWalkDate        DateTime?
  joinedDate          DateTime           @default(now())
  accounts            Account[]
  sessions            Session[]
  eventParticipations EventParticipant[]
  achievements        UserAchievement[]
  walks               Walk[]
  dogs                Dog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EventRoute {
  id                   String             @id @default(cuid())
  name                 String
  description          String?
  location             String
  distance             Float
  difficulty           String             @default("EASY")
  eventDate            DateTime
  maxParticipants      Int?
  entryPrice           Float?
  requiresConfirmation Boolean            @default(true)
  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  eventParticipants    EventParticipant[]
  walks                Walk[]

  @@map("event_routes")
}

enum DogSex {
  MALE
  FEMALE
  UNKNOWN
}

model Dog {
  id                      String   @id @default(cuid())
  userId                  String
  name                    String
  breed                   String?
  sex                     DogSex?
  age                     Int?
  photo                   String?
  obedience               Int?     // 1-10 scale
  socializationWithDogs   Int?     // 1-10 scale  
  socializationWithPeople Int?     // 1-10 scale
  specialCharacteristic   String?
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventParticipant {
  id                  String     @id @default(cuid())
  userId              String
  eventRouteId        String
  registeredAt        DateTime   @default(now())
  attendanceConfirmed Boolean    @default(false)
  confirmationCode    String     @unique
  confirmedAt         DateTime?
  confirmedBy         String?
  rating              Int?
  feedback            String?
  eventRoute          EventRoute @relation(fields: [eventRouteId], references: [id], onDelete: Cascade)
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventRouteId])
  @@map("event_participants")
}

model Walk {
  id           String      @id @default(cuid())
  userId       String
  kilometers   Float
  duration     Int?
  date         DateTime    @default(now())
  notes        String?
  weather      String?
  dogMood      String?
  eventRouteId String?
  dogCondition String?
  userFeedback String?
  rating       Int?
  eventRoute   EventRoute? @relation(fields: [eventRouteId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("walks")
}

model Achievement {
  id             String              @id @default(cuid())
  name           String              @unique
  description    String
  icon           String
  category       AchievementCategory
  kmRequired     Float?
  walksRequired  Int?
  streakRequired Int?
  isActive       Boolean             @default(true)
  sortOrder      Int                 @default(0)
  users          UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Float       @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model AppConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("app_config")
}

enum Role {
  USER
  ADMIN
}

enum AchievementCategory {
  DISTANCE
  WALKS
  STREAK
  SPECIAL
  CONSTANCY
  EVENTROUTE
}
