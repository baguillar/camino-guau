
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/camino_guau/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  isAdmin       Boolean   @default(false)
  pushToken     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts       Account[]
  sessions       Session[]
  dogs           Dog[]
  attendances    Attendance[]
  userStamps     UserStamp[]
  achievements   UserAchievement[]
  userProgress   UserProgress?
  entryCodesUsed EntryCodeUsage[]
}

model Dog {
  id        String   @id @default(cuid())
  name      String
  breed     String?
  image     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String?
  kilometers  Float
  qrCode      String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  attendances Attendance[]
  stamps      Stamp[]
  entryCodes  EntryCode[]
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  attended  Boolean  @default(false)
  qrScanned Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  type        String // 'kilometers', 'events', 'special'
  threshold   Float  // valor requerido para desbloquear
  order       Int    @default(0)
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

model Stamp {
  id          String  @id @default(cuid())
  name        String
  description String?
  image       String
  eventId     String
  categoryId  String?
  rarity      String  @default("common") // common, rare, epic, legendary
  
  event      Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category   StampCategory? @relation(fields: [categoryId], references: [id])
  userStamps UserStamp[]
}

model UserStamp {
  id        String   @id @default(cuid())
  userId    String
  stampId   String
  earnedAt  DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  stamp Stamp @relation(fields: [stampId], references: [id], onDelete: Cascade)
  
  @@unique([userId, stampId])
}

model UserProgress {
  id               String   @id @default(cuid())
  userId           String   @unique
  totalKilometers  Float    @default(0)
  eventsCompleted  Int      @default(0)
  stampsCollected  Int      @default(0)
  currentLevel     Int      @default(1)
  experiencePoints Int      @default(0)
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EntryCode {
  id          String   @id @default(cuid())
  code        String   @unique
  eventId     String
  kilometers  Float
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  usage EntryCodeUsage?
}

model EntryCodeUsage {
  id          String   @id @default(cuid())
  entryCodeId String   @unique
  userId      String
  usedAt      DateTime @default(now())
  
  entryCode EntryCode @relation(fields: [entryCodeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      String   // 'achievement', 'event', 'milestone', 'general'
  data      Json?
  isRead    Boolean  @default(false)
  isSent    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([userId, isRead])
  @@index([isSent, createdAt])
}

model StampCategory {
  id          String @id @default(cuid())
  name        String
  description String?
  color       String @default("#f97316")
  icon        String @default("üèÜ")
  
  stamps Stamp[]
}
