
// generator y datasource (ya los tienes)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  
  // Camino Guau specific fields
  totalKilometers Float    @default(0)
  totalWalks      Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)
  lastWalkDate    DateTime?
  joinedDate      DateTime @default(now())
  
  accounts    Account[]
  sessions    Session[]
  walks       Walk[]
  dogs        Dog[]
  achievements UserAchievement[]
  eventParticipations EventParticipant[]

  @@map("users")
}

model Dog {
  id              String   @id @default(cuid())
  userId          String
  name            String
  breed           String?  // Raza escribible
  sex             DogSex   @default(UNKNOWN)
  age             Int?     // En años
  photo           String?  // URL de la foto
  obedience       Int      @default(5) // 1-10 scale
  socializationWithDogs Int @default(5) // 1-10 scale
  socializationWithPeople Int @default(5) // 1-10 scale
  specialCharacteristic String? // Característica especial
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dogs")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EventRoute {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String
  distance    Float
  difficulty  String   @default("EASY") // EASY, MEDIUM, HARD
  
  // Nuevos campos para eventos con entrada
  eventDate   DateTime
  maxParticipants Int?
  entryPrice      Float?
  requiresConfirmation Boolean @default(true)
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  walks Walk[]
  eventParticipants EventParticipant[]
  
  @@map("event_routes")
}

model EventParticipant {
  id              String   @id @default(cuid())
  userId          String
  eventRouteId    String
  registeredAt    DateTime @default(now())
  attendanceConfirmed Boolean @default(false)
  confirmationCode    String @unique
  confirmedAt         DateTime?
  confirmedBy         String? // ID del admin que confirmó
  
  // Feedback post-evento
  rating          Int?     // 1-5 estrellas
  feedback        String?
  
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRoute      EventRoute @relation(fields: [eventRouteId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventRouteId])
  @@map("event_participants")
}

model Walk {
  id          String   @id @default(cuid())
  userId      String
  kilometers  Float
  duration    Int?     // in minutes
  date        DateTime @default(now())
  notes       String?
  weather     String?
  dogMood     String?
  
  // New fields for EventosGuau routes
  eventRouteId String?
  dogCondition String?  // "excelente", "bueno", "regular", "cansado"
  userFeedback String?  // User's general feedback about the walk
  rating       Int?     // 1-5 stars rating
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRoute EventRoute? @relation(fields: [eventRouteId], references: [id], onDelete: SetNull)
  
  @@map("walks")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  category    AchievementCategory
  
  // Requirements
  kmRequired      Float?
  walksRequired   Int?
  streakRequired  Int?
  isActive        Boolean @default(true)
  sortOrder       Int     @default(0)
  
  users UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())
  progress      Float     @default(0)
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model AppConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("app_config")
}

enum Role {
  USER
  ADMIN
}

enum DogSex {
  MALE
  FEMALE
  UNKNOWN
}

enum AchievementCategory {
  DISTANCE
  WALKS
  STREAK
  SPECIAL
  CONSTANCY  // For consecutive event participation
  EVENTROUTE // For completing specific routes
}
